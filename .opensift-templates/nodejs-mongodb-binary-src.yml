kind: "Template"
apiVersion: "v1"
metadata:
  name: "notify-bc"
  creationTimestamp: null
  annotations:
    description: "NotifyBC app with a MongoDB database"
    iconClass: "icon-nodejs"
    tags: "instant-app,nodejs,mongodb"
objects:
  -
    kind: "BuildConfig"
    apiVersion: "v1"
    metadata:
      name: "notify-bc"
      annotations:
        description: "Defines how to build the application"
    spec:
      source:
        type: "Binary"
        binary:
          asFile: "webapp.tar"
      strategy:
        type: "Source"
        sourceStrategy:
          from:
            kind: "ImageStreamTag"
            name: nodejs:4
            namespace: openshift
          incremental: true
      output:
        to:
          kind: "ImageStreamTag"
          name: "notify-bc:latest"
  -
    kind: "ImageStream"
    apiVersion: "v1"
    metadata:
      name: "notify-bc"
      annotations:
        description: "Keeps track of changes in the application image"
  -
    kind: "PersistentVolumeClaim"
    apiVersion: "v1"
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"
  -
    kind: "DeploymentConfig"
    apiVersion: "v1"
    metadata:
      name: "notify-bc"
      annotations:
        description: "Defines how to deploy the application server"
    spec:
      strategy:
        type: "Rolling"
      triggers:
        -
          type: "ImageChange"
          imageChangeParams:
            automatic: true
            containerNames:
              - "notify-bc"
            from:
              kind: "ImageStreamTag"
              name: "notify-bc:latest"
        -
          type: "ConfigChange"
      replicas: 1
      selector:
        name: "notify-bc"
      template:
        metadata:
          name: "notify-bc"
          labels:
            name: "notify-bc"
        spec:
          containers:
            -
              name: "notify-bc"
              image: "notify-bc"
              ports:
                -
                  containerPort: 3000
              env:
                -
                  name: NODE_ENV
                  value: production
                -
                  name: "DATABASE_SERVICE_NAME"
                  value: "${DATABASE_SERVICE_NAME}"
                -
                  name: "MONGODB_USER"
                  value: "${DATABASE_USER}"
                -
                  name: "MONGODB_PASSWORD"
                  value: "${DATABASE_PASSWORD}"
                -
                  name: "MONGODB_DATABASE"
                  value: "${DATABASE_NAME}"
                -
                  name: "MONGODB_ADMIN_PASSWORD"
                  value: "${DATABASE_ADMIN_PASSWORD}"
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
          name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
          - env:
            - name: MONGODB_USER
              value: ${DATABASE_USER}
            - name: MONGODB_PASSWORD
              value: ${DATABASE_PASSWORD}
            - name: MONGODB_DATABASE
              value: ${DATABASE_NAME}
            - name: MONGODB_ADMIN_PASSWORD
              value: ${DATABASE_ADMIN_PASSWORD}
            image: ' '
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 27017
              timeoutSeconds: 1
            name: mongodb
            ports:
            - containerPort: 27017
            readinessProbe:
              exec:
                command:
                - /bin/sh
                - -i
                - -c
                - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                  --eval="quit()"
              initialDelaySeconds: 3
              timeoutSeconds: 1
            resources:
              limits:
                memory: ${MEMORY_MONGODB_LIMIT}
            volumeMounts:
            - mountPath: /var/lib/mongodb/data
              name: ${DATABASE_SERVICE_NAME}-data
          volumes:
          - emptyDir:
              medium: ""
            name: ${DATABASE_SERVICE_NAME}-data
      triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
          - mongodb
          from:
            kind: ImageStreamTag
            name: mongodb:3.2
            namespace: openshift
        type: ImageChange
      - type: ConfigChange
  -
    kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "notify-bc"
      annotations:
        description: "Exposes and load balances the application pods"
    spec:
      ports:
        -
          name: "web"
          port: 3000
          targetPort: 3000
      selector:
        name: "notify-bc"
  -
    kind: "Service"
    apiVersion: "v1"
    metadata:
      name: "${DATABASE_SERVICE_NAME}"
      annotations:
        description: "Exposes the database server"
    spec:
      ports:
        -
          name: "mongodb"
          port: 27017
          targetPort: 27017
      selector:
        name: "${DATABASE_SERVICE_NAME}"
  -
    kind: "Route"
    apiVersion: "v1"
    metadata:
      name: "notify-bc"
    spec:
      host: "${APPLICATION_DOMAIN}"
      to:
        kind: "Service"
        name: "notify-bc"
parameters:
  -
    name: "APPLICATION_DOMAIN"
    description: "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted."
  -
    name: "DATABASE_SERVICE_NAME"
    description: "Database service name"
    value: "mongodb"
  -
    name: "DATABASE_USER"
    description: "Username for MongoDB user that will be used for accessing the database"
    generate: "expression"
    from: "user[A-Z0-9]{3}"
  -
    name: "DATABASE_PASSWORD"
    description: "Password for the MongoDB user"
    generate: "expression"
    from: "[a-zA-Z0-9]{16}"
  -
    name: "DATABASE_NAME"
    description: "Database name"
    value: "sampledb"
  -
    name: "DATABASE_ADMIN_PASSWORD"
    description: "Password for the database admin user"
    generate: "expression"
    from: "[a-zA-Z0-9]{16}"
  - name: "VOLUME_CAPACITY"
    displayName: "Volume capacity"
    description: "Volume space available for data, e.g. 512Mi, 2Gi"
    value: "512Mi"
    required: true
  - description: Maximum amount of memory the MongoDB container can use.
    displayName: Memory Limit (MongoDB)
    name: MEMORY_MONGODB_LIMIT
    required: true
    value: 512Mi
labels:
  template: "notify-bc"
